{"ast":null,"code":"var _jsxFileName = \"/Users/platonmazarakis/coding-projects/phineas.io/src/components/SuccessiveType.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport useSound from 'use-sound';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Word = ({\n  word\n}) => {\n  _s();\n\n  const [filled, setFilled] = useState(false);\n  useEffect(() => {\n    setTimeout(() => {\n      setFilled(true);\n    }, 65);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(WordSC, {\n    filled: filled,\n    children: word\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Word, \"Tinc81DAPpK2VNP1wAdxBTGJz+U=\");\n\n_c = Word;\n\nconst SuccessiveType = ({\n  words,\n  speed,\n  userSkipped,\n  onEnd\n}) => {\n  _s2();\n\n  const [play] = useSound('/p-static/sounds/type.ogg');\n  const [index, setIndex] = useState(0);\n  const splitWords = useMemo(() => words.split(' '), [words]);\n  const shownWords = useMemo(() => splitWords.slice(0, index + 1), [splitWords, index]);\n  useEffect(() => {\n    if (index === splitWords.length - 1) {\n      if (onEnd) setTimeout(() => {\n        onEnd();\n      }, 1800);\n      return;\n    }\n\n    const currentWord = splitWords[index];\n    setTimeout(() => {\n      setIndex(index + 1);\n    }, currentWord.length * (Math.E * 12.5) + (currentWord[currentWord.length - 1] === '.' ? 500 : 0));\n  }, [index, splitWords]);\n  useEffect(() => {\n    if (!userSkipped) play();\n  }, [index, play, userSkipped]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: shownWords.map((word, idx) => /*#__PURE__*/_jsxDEV(Word, {\n      word: word\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(SuccessiveType, \"RsF1OFno1mST1wzKYD/uJ+mocZY=\", false, function () {\n  return [useSound];\n});\n\n_c2 = SuccessiveType;\nconst Container = styled.div`\n  text-align: left;\n  color: #fff;\n  font-size: 20pt;\n`;\n_c3 = Container;\nconst WordSC = styled.span`\n  color: ${({\n  filled\n}) => filled ? '#ccc' : '#fff'};\n  margin-right: 4pt;\n  transition: color 0.1s ease;\n  display: inline-block;\n`;\n_c4 = WordSC;\nexport default SuccessiveType;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Word\");\n$RefreshReg$(_c2, \"SuccessiveType\");\n$RefreshReg$(_c3, \"Container\");\n$RefreshReg$(_c4, \"WordSC\");","map":{"version":3,"sources":["/Users/platonmazarakis/coding-projects/phineas.io/src/components/SuccessiveType.tsx"],"names":["useEffect","useMemo","useState","styled","useSound","Word","word","filled","setFilled","setTimeout","SuccessiveType","words","speed","userSkipped","onEnd","play","index","setIndex","splitWords","split","shownWords","slice","length","currentWord","Math","E","map","idx","Container","div","WordSC","span"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport useSound from 'use-sound';\n\nconst Word = ({ word }: { word: string }) => {\n  const [filled, setFilled] = useState(false);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setFilled(true);\n    }, 65);\n  }, []);\n\n  return <WordSC filled={filled}>{word}</WordSC>;\n};\n\ninterface ISuccessiveTypeProps {\n  words: string;\n  speed: number;\n  userSkipped?: boolean;\n  onEnd?: () => void;\n}\n\nconst SuccessiveType = ({ words, speed, userSkipped, onEnd }: ISuccessiveTypeProps) => {\n  const [play] = useSound('/p-static/sounds/type.ogg');\n\n  const [index, setIndex] = useState(0);\n\n  const splitWords: string[] = useMemo(() => words.split(' '), [words]);\n  const shownWords: string[] = useMemo(() => splitWords.slice(0, index + 1), [splitWords, index]);\n\n  useEffect(() => {\n    if (index === splitWords.length - 1) {\n      if (onEnd)\n        setTimeout(() => {\n          onEnd();\n        }, 1800);\n\n      return;\n    }\n\n    const currentWord = splitWords[index];\n\n    setTimeout(() => {\n      setIndex(index + 1);\n    }, currentWord.length * (Math.E * 12.5) + (currentWord[currentWord.length - 1] === '.' ? 500 : 0));\n  }, [index, splitWords]);\n\n  useEffect(() => {\n    if (!userSkipped) play();\n  }, [index, play, userSkipped]);\n\n  return (\n    <Container>\n      {shownWords.map((word: string, idx) => (\n        <Word key={idx} word={word} />\n      ))}\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  text-align: left;\n  color: #fff;\n  font-size: 20pt;\n`;\n\nconst WordSC = styled.span<{ filled: boolean }>`\n  color: ${({ filled }) => (filled ? '#ccc' : '#fff')};\n  margin-right: 4pt;\n  transition: color 0.1s ease;\n  display: inline-block;\n`;\n\nexport default SuccessiveType;\n"]},"metadata":{},"sourceType":"module"}