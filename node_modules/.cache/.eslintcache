[{"/Users/platonmazarakis/coding-projects/pm-personal-website/src/index.tsx":"1","/Users/platonmazarakis/coding-projects/pm-personal-website/src/reportWebVitals.ts":"2","/Users/platonmazarakis/coding-projects/pm-personal-website/src/App.tsx":"3","/Users/platonmazarakis/coding-projects/pm-personal-website/src/pages/Presence.tsx":"4","/Users/platonmazarakis/coding-projects/pm-personal-website/src/pages/Sakurajima.tsx":"5","/Users/platonmazarakis/coding-projects/pm-personal-website/src/pages/Etc.tsx":"6","/Users/platonmazarakis/coding-projects/pm-personal-website/src/components/Nav.tsx":"7","/Users/platonmazarakis/coding-projects/pm-personal-website/src/components/Icons.tsx":"8","/Users/platonmazarakis/coding-projects/pm-personal-website/src/pages/Home.tsx":"9","/Users/platonmazarakis/coding-projects/pm-personal-website/src/pages/How.tsx":"10","/Users/platonmazarakis/coding-projects/pm-personal-website/src/components/SuccessiveType.tsx":"11","/Users/platonmazarakis/coding-projects/pm-personal-website/src/pages/Where.tsx":"12","/Users/platonmazarakis/coding-projects/pm-personal-website/src/state/lanyard.ts":"13","/Users/platonmazarakis/coding-projects/pm-personal-website/src/pages/PageWrapper.tsx":"14","/Users/platonmazarakis/coding-projects/pm-personal-website/src/components/Doing.tsx":"15","/Users/platonmazarakis/coding-projects/pm-personal-website/src/components/Repo.tsx":"16","/Users/platonmazarakis/coding-projects/pm-personal-website/src/components/Technology.tsx":"17","/Users/platonmazarakis/coding-projects/pm-personal-website/src/components/Co.tsx":"18"},{"size":537,"mtime":1667149278819,"results":"19","hashOfConfig":"20"},{"size":425,"mtime":1667149278820,"results":"21","hashOfConfig":"20"},{"size":4392,"mtime":1667223249437,"results":"22","hashOfConfig":"20"},{"size":827,"mtime":1667149278820,"results":"23","hashOfConfig":"20"},{"size":1279,"mtime":1667149278820,"results":"24","hashOfConfig":"20"},{"size":1428,"mtime":1667149278820,"results":"25","hashOfConfig":"20"},{"size":7294,"mtime":1667224027244,"results":"26","hashOfConfig":"20"},{"size":14553,"mtime":1667149278819,"results":"27","hashOfConfig":"20"},{"size":2418,"mtime":1667223329645,"results":"28","hashOfConfig":"20"},{"size":1797,"mtime":1667149278820,"results":"29","hashOfConfig":"20"},{"size":1776,"mtime":1667149278819,"results":"30","hashOfConfig":"20"},{"size":3563,"mtime":1667153075161,"results":"31","hashOfConfig":"20"},{"size":130,"mtime":1667149278820,"results":"32","hashOfConfig":"20"},{"size":793,"mtime":1667149278820,"results":"33","hashOfConfig":"20"},{"size":5537,"mtime":1667149278819,"results":"34","hashOfConfig":"20"},{"size":2583,"mtime":1667149278819,"results":"35","hashOfConfig":"20"},{"size":2209,"mtime":1667149278819,"results":"36","hashOfConfig":"20"},{"size":2560,"mtime":1667149278819,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"f6t4w8",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/platonmazarakis/coding-projects/pm-personal-website/src/index.tsx",[],"/Users/platonmazarakis/coding-projects/pm-personal-website/src/reportWebVitals.ts",[],"/Users/platonmazarakis/coding-projects/pm-personal-website/src/App.tsx",["80","81"],"import { AnimatePresence, motion } from 'framer-motion';\nimport { KeyboardEvent, useCallback, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport SuccessiveType from './components/SuccessiveType';\nimport Nav from './components/Nav';\nimport Home from './pages/Home';\nimport Where from './pages/Where';\nimport How from './pages/How';\nimport Etc from './pages/Etc';\nimport Presence from './pages/Presence';\nimport Sakurajima from './pages/Sakurajima';\nimport { ChevronsRight } from './components/Icons';\nimport useSound from 'use-sound';\n\nconst shouldPlayIntro = window.location.pathname === '/';\n\nfunction App() {\n  const [introEnded, setIntroEnded] = useState(!shouldPlayIntro);\n\n  const onKeyDown = (e: KeyboardEvent<HTMLDocument> & any) => {\n    if ((e.keyCode === 9 || e.which === 9) && !introEnded) {\n      e.preventDefault();\n    }\n  };\n\n  useEffect(() => {\n    if (!shouldPlayIntro) return;\n\n    const script = document.createElement('script');\n\n    script.src = '/p-static/js/stars.js';\n    script.async = true;\n\n    document.body.appendChild(script);\n\n    document.addEventListener('keydown', onKeyDown);\n  }, []);\n\n  const onIntroEnd = useCallback(() => {\n    localStorage.setItem('v1:intro-completed', 'true');\n    setIntroEnded(true);\n  }, []);\n\n  return (\n    <Wrapper>\n      <Helmet defaultTitle={'Phineas Walton'} titleTemplate={'%s â€¢ Phineas'} />\n      {shouldPlayIntro ? (\n        <SuccessiveTypeContainer\n          transition={{ duration: 0.85 }}\n          animate={{ y: introEnded ? -window.innerHeight : 0 }}\n        >\n          <ProgressContainer onClick={onIntroEnd}>\n            <h4>\n              Skip intro <ChevronsRight />\n            </h4>\n          </ProgressContainer>\n          <SuccessiveType\n            onEnd={onIntroEnd}\n            words={\n              \"Software was meant to be light and feel effortless to use. As we're all developing new products so rapidly, bloat in our code is catching up with us. I design simple but effective, highly-scalable and realtime products for the future.\"\n            }\n            speed={1}\n            userSkipped={introEnded}\n          />\n        </SuccessiveTypeContainer>\n      ) : null}\n\n      <motion.canvas\n        transition={{ duration: 0.85 }}\n        animate={{ opacity: introEnded ? 0 : 0.25 }}\n        id=\"stars\"\n      />\n\n      <MainContent\n        transition={{ duration: 0.85 }}\n        initial={false}\n        animate={{ y: !introEnded ? window.innerHeight : 0 }}\n      >\n        <Router>\n          <Nav />\n\n          <ContentWrapper>\n            <AnimatePresence>\n              <Switch>\n                <Route exact path=\"/\" component={Home} />\n                <Route exact path=\"/where\" component={Where} />\n                <Route exact path=\"/how\" component={How} />\n                <Route exact path=\"/etc\" component={Etc} />\n                <Route exact path=\"/presence\" component={Presence} />\n                <Route exact path=\"/sakuraji.ma\" component={Sakurajima} />\n              </Switch>\n            </AnimatePresence>\n          </ContentWrapper>\n        </Router>\n      </MainContent>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n\n  canvas {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100vh;\n    z-index: 0;\n  }\n`;\n\nconst SuccessiveTypeContainer = styled(motion.div)`\n  width: 65ch;\n  height: 350px;\n  padding: 2rem;\n  position: relative;\n  z-index: 1;\n`;\n\nconst ProgressContainer = styled.div`\n  vertical-align: middle;\n  cursor: pointer;\n  transition: color 0.2s ease;\n\n  svg {\n    vertical-align: middle;\n    height: 19px;\n  }\n\n  &:hover {\n    color: #ff65b2;\n  }\n`;\n\nconst MainContent = styled(motion.div)`\n  height: 100vh;\n  width: 100%;\n  position: absolute;\n  display: flex;\n  flex-direction: row;\n  overflow-y: auto;\n\n  @media (max-width: 850px) {\n    flex-direction: column;\n    /* padding-top: 65px; */\n  }\n`;\n\nconst ContentWrapper = styled.div`\n  margin-left: 15rem;\n  padding: 2rem;\n  width: 100%;\n  box-sizing: border-box;\n  font-size: 1rem;\n\n  a {\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n\n  @media (max-width: 850px) {\n    margin-left: 0px;\n    padding-top: 65px;\n  }\n`;\n\nexport default App;\n","/Users/platonmazarakis/coding-projects/pm-personal-website/src/pages/Presence.tsx",[],"/Users/platonmazarakis/coding-projects/pm-personal-website/src/pages/Sakurajima.tsx",[],"/Users/platonmazarakis/coding-projects/pm-personal-website/src/pages/Etc.tsx",[],"/Users/platonmazarakis/coding-projects/pm-personal-website/src/components/Nav.tsx",["82"],"import { motion, PanInfo } from 'framer-motion';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { GitHubLogo, KeyIcon, MenuIcon, NavigationIcon, TwitterLogo, XIcon } from './Icons';\nimport Doing from './Doing';\nimport useSound from 'use-sound';\nimport { useAtom } from 'jotai';\nimport { doingAtom } from '../state/lanyard';\nimport ContentLoader from 'react-content-loader';\n\nconst pathnameOffsets: { [key: string]: number } = {\n  '/': 0,\n  '/where': 39,\n  '/how': 78,\n  '/etc': 117,\n};\n\nconst Nav = () => {\n  const history = useHistory();\n  const { pathname } = useLocation();\n\n  const [playSwitchPageSound] = useSound('/p-static/sounds/switch-page.mp3');\n\n  const [dragYOffset, setDragYOffset] = useState(0);\n  const [openOnMobile, setOpenOnMobile] = useState(false);\n  const [presenceActive, setPresenceActive] = useState(false);\n\n  const [doing] = useAtom(doingAtom);\n\n  const dragConstraintsRef = useRef(null);\n\n  useEffect(() => {\n    if (openOnMobile) setOpenOnMobile(false);\n    playSwitchPageSound();\n  }, [pathname]);\n\n  const pageIndicatorOffset = useMemo(\n    () => (pathname ? pathnameOffsets[pathname] ?? -180 : 0),\n    [pathname]\n  );\n\n  const pageIndicatorOffsetWithDecoration = useMemo(\n    () => 71 + 33 + pageIndicatorOffset - dragYOffset,\n    [pageIndicatorOffset, dragYOffset]\n  );\n\n  const onPageIndicatorDragEnd = useCallback(\n    (_event, info: PanInfo) => {\n      const goal = pageIndicatorOffset + info.offset.y;\n\n      const closest = Object.entries(pathnameOffsets).reduce(\n        ([prevPath, prevOffset], [curPath, curOffset]) => {\n          return Math.abs(curOffset - goal) < Math.abs(prevOffset - goal)\n            ? [curPath, curOffset]\n            : [prevPath, prevOffset];\n        }\n      );\n\n      if (closest[0] === pathname) return;\n\n      setDragYOffset(dragYOffset + info.offset.y + info.velocity.y);\n      history.push(closest[0]);\n    },\n    [history, pageIndicatorOffset, dragYOffset, pathname]\n  );\n\n  const toggleMobileMenu = useCallback(() => setOpenOnMobile(!openOnMobile), [openOnMobile]);\n\n  return (\n    <>\n      <MobileHeader>\n        <Title>Platon Mazarakis</Title>\n        {openOnMobile ? (\n          <XIcon onClick={toggleMobileMenu} />\n        ) : (\n          <MenuIcon onClick={toggleMobileMenu} />\n        )}\n      </MobileHeader>\n      <Container openOnMobile={openOnMobile}>\n        {!openOnMobile ? (\n          <PageIndicator\n            whileHover={{ width: 3 }}\n            drag=\"y\"\n            onDragEnd={onPageIndicatorDragEnd}\n            dragConstraints={dragConstraintsRef}\n            animate={{ top: pageIndicatorOffsetWithDecoration }}\n          />\n        ) : null}\n        <Items>\n          {!openOnMobile ? (\n            <Row>\n              <Title>Platon Mazarakis</Title>\n              {/* <IconButton>\n              <ChevronDown />\n            </IconButton> */}\n            </Row>\n          ) : null}\n          <Row>\n            <Location\n              target=\"_blank\"\n              href={\n                doing\n                  ? `https://www.google.com/maps/search/${encodeURIComponent('Manhattan, NY')}`\n                  : undefined\n              }\n              rel=\"noreferrer\"\n            >\n              <NavigationIcon />\n              {doing?.kv.location ? (\n                'Manhattan, NY'\n              ) : (\n                <ContentLoader\n                  speed={2}\n                  // width={\"auto\"}\n                  height={19}\n                  viewBox=\"0 0 160 25\"\n                  backgroundColor=\"#121212\"\n                  foregroundColor=\"#2e2e2e\"\n                >\n                  <rect x=\"0\" y=\"3\" rx=\"6\" ry=\"6\" width=\"160\" height=\"19\" />\n                </ContentLoader>\n              )}\n            </Location>\n          </Row>\n\n          <div ref={dragConstraintsRef}>\n            <Page active={pathname === '/' ? 1 : 0} to=\"/\">\n              what I do\n            </Page>\n            <Page active={pathname === '/where' ? 1 : 0} to=\"/where\">\n              where I've done it\n            </Page>\n            <Page active={pathname === '/how' ? 1 : 0} to=\"/how\">\n              how I do it\n            </Page>\n            <Page active={pathname === '/etc' ? 1 : 0} to=\"/etc\">\n              more + contact\n            </Page>\n          </div>\n\n          <Icons>\n            <a href=\"https://twitter.com/PMazarakis\">\n              <TwitterLogo />\n            </a>\n            <a href=\"https://github.com/phineas\">\n              <GitHubLogo />\n            </a>\n            <a href=\"https://keybase.io/phineas\">\n              <KeyIcon />\n            </a>\n          </Icons>\n          <Doing\n            style={{ display: presenceActive ? 'block' : 'none' }}\n            setActive={setPresenceActive}\n          />\n        </Items>\n      </Container>\n    </>\n  );\n};\n\nconst Container = styled.aside<{ openOnMobile: boolean }>`\n  display: inline-block;\n  box-sizing: border-box;\n  flex-direction: column;\n  padding: 2rem;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 15rem;\n  border-right: 1px solid #101010;\n  height: 100vh;\n\n  @media (max-width: 850px) {\n    display: ${({ openOnMobile }) => (openOnMobile ? 'block' : 'none')};\n    background-color: rgba(0, 0, 0, 0.8);\n    backdrop-filter: blur(7px);\n    z-index: 1;\n    top: 65px;\n    width: 100%;\n    height: calc(100% - 65px);\n  }\n`;\n\nconst MobileHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  position: fixed;\n  top: 0;\n  display: flex;\n  padding: 2rem;\n  box-sizing: border-box;\n  width: 100%;\n  height: 65px;\n  background-color: rgba(0, 0, 0, 0.8);\n  backdrop-filter: blur(5px);\n  border-bottom: 1px solid #101010;\n  flex-shrink: 0;\n  z-index: 1;\n\n  svg {\n    margin-left: auto;\n    cursor: pointer;\n    color: #ccc;\n  }\n\n  @media (min-width: 850px) {\n    display: none;\n  }\n`;\n\nconst PageIndicator = styled(motion.div)`\n  width: 1px;\n  height: 39px;\n  background-color: #fff;\n  position: absolute;\n  right: -1px;\n  cursor: pointer;\n`;\n\nconst Items = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst Title = styled.div`\n  font-weight: 600;\n  padding: 10px 0px;\n`;\n\nconst Location = styled.a`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  font-weight: 500;\n  height: 19px;\n  font-size: 14px;\n  margin-bottom: 15px;\n  user-select: none;\n\n  color: white;\n\n  &:hover {\n    color: rgba(255, 255, 255, 0.8);\n  }\n\n  svg:first-child {\n    height: 18px;\n    width: 18px;\n    margin-right: 10px;\n    color: #ff65b2;\n  }\n`;\n\nconst Page = styled(Link)<{ active: number }>`\n  color: ${({ active }) => (active ? '#fff' : '#ccc')};\n  padding: 10px 0px;\n  display: flex;\n\n  &:hover {\n    /* background-color: #fff; */\n    color: #fff;\n  }\n`;\n\nconst Icons = styled.div`\n  margin-top: auto;\n  color: #ccc;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-evenly;\n  padding: 1rem 0;\n\n  svg {\n    width: 20px;\n    height: 20px;\n    cursor: pointer;\n    color: #ccc;\n\n    &:hover {\n      color: #fff;\n    }\n  }\n`;\n\nexport default Nav;\n","/Users/platonmazarakis/coding-projects/pm-personal-website/src/components/Icons.tsx",[],"/Users/platonmazarakis/coding-projects/pm-personal-website/src/pages/Home.tsx",[],"/Users/platonmazarakis/coding-projects/pm-personal-website/src/pages/How.tsx",["83"],"import PageWrapper from './PageWrapper';\nimport Technology from '../components/Technology';\nimport {\n  ElixirLogo,\n  RabbitMQLogo,\n  ReactLogo,\n  RustLogo,\n  SolidityLogo,\n  TypescriptLogo,\n} from '../components/Icons';\nimport { Helmet } from 'react-helmet';\n\nconst How = () => {\n  return (\n    <PageWrapper>\n      <Helmet>\n        <title>How</title>\n      </Helmet>\n      <h1>How I Do It</h1>\n      <p>\n        I highly leverage new bleeding-edge technologies and languages like Elixir to stay on top of\n        the game. You can find a list of my most-used technologies below.\n      </p>\n\n      <Technology\n        color=\"#9c1fa5\"\n        icon={<ElixirLogo />}\n        name=\"Elixir\"\n        type=\"Realtime, Backend\"\n        useCase={'Building fault-tolerant realtime systems that scale out across multiple nodes'}\n      />\n\n      <Technology\n        color=\"#232340\"\n        icon={<ReactLogo />}\n        name=\"React\"\n        type=\"Frontend framework\"\n        useCase={'Constructing stateful and durable frontends for large and interactive web apps'}\n      />\n\n      <Technology\n        color=\"#dea584\"\n        icon={<RustLogo />}\n        name=\"Rust\"\n        type=\"Backend, System\"\n        useCase={\n          'Optimizing parts of Elixir code using Rust NIFs and writing efficient system code'\n        }\n      />\n\n      <Technology\n        color=\"#007acc\"\n        icon={<TypescriptLogo />}\n        name=\"TypeScript\"\n        type=\"JS Framework\"\n        useCase={'Types for JS - will save your life when projects expand'}\n      />\n\n      <Technology\n        color=\"#FF6600\"\n        icon={<RabbitMQLogo />}\n        name=\"RabbitMQ\"\n        type=\"Message queue\"\n        useCase={'Messaging between different services in a robust & durable way'}\n      />\n    </PageWrapper>\n  );\n};\n\nexport default How;\n","/Users/platonmazarakis/coding-projects/pm-personal-website/src/components/SuccessiveType.tsx",["84"],"import { useEffect, useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport useSound from 'use-sound';\n\nconst Word = ({ word }: { word: string }) => {\n  const [filled, setFilled] = useState(false);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setFilled(true);\n    }, 65);\n  }, []);\n\n  return <WordSC filled={filled}>{word}</WordSC>;\n};\n\ninterface ISuccessiveTypeProps {\n  words: string;\n  speed: number;\n  userSkipped?: boolean;\n  onEnd?: () => void;\n}\n\nconst SuccessiveType = ({ words, speed, userSkipped, onEnd }: ISuccessiveTypeProps) => {\n  const [play] = useSound('/p-static/sounds/type.ogg');\n\n  const [index, setIndex] = useState(0);\n\n  const splitWords: string[] = useMemo(() => words.split(' '), [words]);\n  const shownWords: string[] = useMemo(() => splitWords.slice(0, index + 1), [splitWords, index]);\n\n  useEffect(() => {\n    if (index === splitWords.length - 1) {\n      if (onEnd)\n        setTimeout(() => {\n          onEnd();\n        }, 1800);\n\n      return;\n    }\n\n    const currentWord = splitWords[index];\n\n    setTimeout(() => {\n      setIndex(index + 1);\n    }, currentWord.length * (Math.E * 12.5) + (currentWord[currentWord.length - 1] === '.' ? 500 : 0));\n  }, [index, splitWords]);\n\n  useEffect(() => {\n    if (!userSkipped) play();\n  }, [index, play, userSkipped]);\n\n  return (\n    <Container>\n      {shownWords.map((word: string, idx) => (\n        <Word key={idx} word={word} />\n      ))}\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  text-align: left;\n  color: #fff;\n  font-size: 20pt;\n`;\n\nconst WordSC = styled.span<{ filled: boolean }>`\n  color: ${({ filled }) => (filled ? '#ccc' : '#fff')};\n  margin-right: 4pt;\n  transition: color 0.1s ease;\n  display: inline-block;\n`;\n\nexport default SuccessiveType;\n","/Users/platonmazarakis/coding-projects/pm-personal-website/src/pages/Where.tsx",["85","86"],"import PageWrapper from './PageWrapper';\nimport Co from '../components/Co';\nimport styled from 'styled-components';\nimport HivenAppIcon from '../assets/images/hiven-app-icon.png';\nimport GigglAppIcon from '../assets/images/giggl-app-icon.jpg';\nimport SocialPassportAppIcon from '../assets/images/sp-app-icon.png';\nimport DoNotPayAppIcon from '../assets/images/dnp-app-icon.png';\n\nimport WonderAppIcon from '../assets/images/wonder-app-icon.png';\nimport OXOAppIcon from '../assets/images/oxo-app-icon.png';\nimport HonkAppIcon from '../assets/images/honk-app-icon.jpg';\nimport Repo from '../components/Repo';\nimport { Helmet } from 'react-helmet';\n\nconst Where = () => {\n  return (\n    <PageWrapper>\n      <Helmet>\n        <title>Where</title>\n      </Helmet>\n      <h1>Where I've Done It</h1>\n      <h3>Companies</h3>\n      <CoWrapper>\n        <Co\n          url=\"https://socialpassport.app\"\n          name=\"Social Passport\"\n          iconReference={SocialPassportAppIcon}\n          tagline=\"Consumer social\"\n          role={'CEO, Co-founder & Developer'}\n          what={'I founded social passport to connect college students with one click'}\n        />\n        <Co\n          url=\"https://donotpay.com\"\n          name=\"Do Not Pay\"\n          iconReference={DoNotPayAppIcon}\n          tagline=\"Consumer\"\n          role={'Product Developer'}\n          what={'Created a suite of products to boost growth and app use'}\n        />\n        <Co\n          url=\"https://joinoxo.com\"\n          name=\"OXO\"\n          iconReference={OXOAppIcon}\n          tagline=\"Enterprise\"\n          role={'Software Engineer'}\n          what={\n            'Built multiple products to deliver Æ’luid rental experience for drivers and owners. Led growth efforts to 7x user base'\n          }\n        />\n        <Co\n          url=\"https://wonderverse.xyz\"\n          name=\"Wonderverse\"\n          iconReference={WonderAppIcon}\n          tagline=\"Consumer social\"\n          role={'Software Engineer'}\n          what={'Worked on multiple projects to '}\n        />\n        <Co\n          url=\"https://honk.me\"\n          name=\"Honk\"\n          iconReference={HonkAppIcon}\n          tagline=\"Consumer social\"\n          role={'Backend Engineer'}\n          what={'I helped design and implement the realtime infrastructure at Honk using Elixir.'}\n        />\n      </CoWrapper>\n\n      <h3>Open-source Projects</h3>\n      <Repo\n        name={'lanyard'}\n        url={'https://github.com/phineas/lanyard'}\n        primaryLanguage={'Elixir'}\n        description=\"Expose your Discord presence to an API in <10 seconds (used on this site)\"\n      />\n      <Repo\n        name={'domain-lookup-tree'}\n        url={'https://github.com/phineas/domain-lookup-tree'}\n        primaryLanguage={'Rust'}\n        description=\"A tree structure in Rust optimized for looking up domain names, with wildcard support\"\n      />\n      <Repo\n        name={'node_compass'}\n        url={'https://github.com/hivenapp/node_compass'}\n        primaryLanguage={'Elixir'}\n        description=\"Automatic hash ring management for Elixir nodes\"\n      />\n      <Repo\n        name={'phineas.io'}\n        url={'https://github.com/phineas/phineas.io'}\n        primaryLanguage={'TypeScript'}\n        description=\"This very website\"\n      />\n    </PageWrapper>\n  );\n};\n\nconst CoWrapper = styled.div`\n  display: grid;\n  width: 100%;\n  gap: 2rem 2rem;\n  grid-template-columns: 1fr 1fr 1fr;\n\n  @media (max-width: 1100px) {\n    grid-template-columns: 1fr 1fr;\n  }\n\n  @media (max-width: 900px) {\n    grid-template-columns: 1fr;\n  }\n`;\n\nexport default Where;\n","/Users/platonmazarakis/coding-projects/pm-personal-website/src/state/lanyard.ts",[],"/Users/platonmazarakis/coding-projects/pm-personal-website/src/pages/PageWrapper.tsx",[],"/Users/platonmazarakis/coding-projects/pm-personal-website/src/components/Doing.tsx",["87","88"],"import { motion } from 'framer-motion';\nimport { forwardRef, useEffect, useMemo, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport styled, { keyframes } from 'styled-components';\nimport { Presence } from '../types/lanyard';\nimport SpotifyLogo from '../assets/images/spotify-logo.svg';\nimport { useAtom } from 'jotai';\nimport { doingAtom } from '../state/lanyard';\n\n// Thanks to Tim (https://github.com/timcole/timcole.me/blob/%F0%9F%A6%84/components/lanyard.tsx) for the types\n\nenum Operation {\n  Event,\n  Hello,\n  Initialize,\n  Heartbeat,\n}\n\nenum EventType {\n  INIT_STATE = 'INIT_STATE',\n  PRESENCE_UPDATE = 'PRESENCE_UPDATE',\n}\n\ntype SocketEvent = {\n  op: Operation;\n  t?: EventType;\n  d: Presence | unknown;\n};\n\nconst logLanyardEvent = (eventName: string, data: any) => {\n  // eslint-disable-next-line no-console\n  console.log(\n    `%cLanyard%c <~ ${eventName} %o`,\n    'background-color: #d7bb87; border-radius: 5px; padding: 3px; color: #372910;',\n    'background: none; color: #d7bb87;',\n    data\n  );\n};\n\nconst discordId = '94490510688792576';\n\nconst Doing = (\n  { setActive, ...props }: { setActive: (active: boolean) => void } & any,\n  ref: any\n) => {\n  const [socket, setSocket] = useState<WebSocket | null>(null);\n  const [doing, setDoing] = useAtom(doingAtom);\n\n  const send = (op: Operation, d?: unknown): void => {\n    if (socket !== null) socket.send(JSON.stringify({ op, d }));\n  };\n\n  useEffect(() => {\n    if (socket === null) return () => {};\n\n    socket.onmessage = function ({ data }: MessageEvent): void {\n      const { op, t, d }: SocketEvent = JSON.parse(data);\n\n      if (op === Operation.Hello) {\n        setInterval(\n          () => send(Operation.Heartbeat),\n          (d as { heartbeat_interval: number }).heartbeat_interval\n        );\n        send(Operation.Initialize, { subscribe_to_id: discordId });\n      } else if (op === Operation.Event && t) {\n        logLanyardEvent(t, d);\n\n        if ([EventType.INIT_STATE, EventType.PRESENCE_UPDATE].includes(t)) setDoing(d as Presence);\n      }\n    };\n\n    socket.onclose = () => {\n      setSocket(null);\n    };\n  }, [socket]);\n\n  useEffect(() => {\n    if (!socket) setSocket(new WebSocket('wss://api.lanyard.rest/socket'));\n  }, [socket]);\n\n  const currentActivity = useMemo(\n    () => doing?.activities.filter((activity) => activity.type === 0)[0],\n    [doing]\n  );\n\n  useEffect(() => {\n    setActive(doing?.listening_to_spotify || currentActivity);\n  }, [doing, currentActivity]);\n\n  if (!doing || !doing?.discord_status) return null;\n\n  return (\n    <>\n      {doing?.listening_to_spotify ? (\n        <Container ref={ref} to={'/presence'} {...props}>\n          <h5>\n            Listening to Spotify <LiveDot />\n          </h5>\n          <>\n            <ActivityRow>\n              <ActivityImageContainer>\n                <ActivityImage src={doing.spotify.album_art_url} />\n                <ActivitySecondaryImage src={SpotifyLogo} />\n              </ActivityImageContainer>\n\n              <ActivityInfo>\n                <h5>{doing.spotify.song}</h5>\n                <p>by {doing.spotify.artist}</p>\n              </ActivityInfo>\n            </ActivityRow>\n          </>\n        </Container>\n      ) : null}\n      {currentActivity ? (\n        <Container to={'/presence'} {...props}>\n          <h5>Doing something</h5>\n          <ActivityRow>\n            {currentActivity.assets ? (\n              <ActivityImageContainer>\n                <ActivityImage\n                  src={`https://cdn.discordapp.com/app-assets/${currentActivity.application_id}/${currentActivity.assets.large_image}.png`}\n                />\n                <ActivitySecondaryImage\n                  src={`https://cdn.discordapp.com/app-assets/${currentActivity.application_id}/${currentActivity.assets.small_image}.png`}\n                />\n              </ActivityImageContainer>\n            ) : null}\n            <ActivityInfo>\n              <h5>{currentActivity.name}</h5>\n              {currentActivity.details ? <p>{currentActivity.details}</p> : null}\n              {currentActivity.state ? <p>{currentActivity.state}</p> : null}\n            </ActivityInfo>\n          </ActivityRow>\n        </Container>\n      ) : null}\n    </>\n  );\n};\n\nconst Container = styled(motion(Link))`\n  width: calc(100% + 2rem);\n  margin-left: -2rem;\n  background-color: transparent;\n  color: #ccc;\n  border-top: 1px solid #101010;\n  padding: 1rem;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #101010;\n    color: #fff;\n  }\n\n  h5 {\n    margin: 0;\n    margin-bottom: 10px;\n  }\n`;\n\nconst fadeInOut = keyframes`\n  0% {\n    opacity: 0;\n  }\n  \n  50% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0%;\n  }\n`;\n\nconst LiveDot = styled.div`\n  display: inline-block;\n  margin-left: 4px;\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  background-color: #ff5252;\n  animation: ${fadeInOut} 2s ease-in-out infinite;\n`;\n\nconst ActivityRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst ActivityImageContainer = styled.div`\n  position: relative;\n  height: 50px;\n`;\n\nconst ActivityImage = styled.img`\n  height: 50px;\n  width: 50px;\n  border-radius: 10px;\n`;\n\nconst ActivitySecondaryImage = styled.img`\n  position: absolute;\n  bottom: -5px;\n  right: -5px;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  background-color: #000;\n  border: 2px solid #000;\n`;\n\nconst ActivityInfo = styled.div`\n  margin-left: 1rem;\n\n  h5 {\n    color: #fff;\n    margin: 0;\n  }\n\n  p {\n    margin: 0;\n    font-size: 0.8rem;\n  }\n`;\n\nexport default forwardRef(Doing);\n","/Users/platonmazarakis/coding-projects/pm-personal-website/src/components/Repo.tsx",[],"/Users/platonmazarakis/coding-projects/pm-personal-website/src/components/Technology.tsx",[],"/Users/platonmazarakis/coding-projects/pm-personal-website/src/components/Co.tsx",[],{"ruleId":"89","severity":1,"message":"90","line":15,"column":8,"nodeType":"91","messageId":"92","endLine":15,"endColumn":16},{"ruleId":"93","severity":1,"message":"94","line":39,"column":6,"nodeType":"95","endLine":39,"endColumn":8,"suggestions":"96"},{"ruleId":"93","severity":1,"message":"97","line":37,"column":6,"nodeType":"95","endLine":37,"endColumn":16,"suggestions":"98"},{"ruleId":"89","severity":1,"message":"99","line":8,"column":3,"nodeType":"91","messageId":"92","endLine":8,"endColumn":15},{"ruleId":"93","severity":1,"message":"100","line":47,"column":6,"nodeType":"95","endLine":47,"endColumn":25,"suggestions":"101"},{"ruleId":"89","severity":1,"message":"102","line":4,"column":8,"nodeType":"91","messageId":"92","endLine":4,"endColumn":20},{"ruleId":"89","severity":1,"message":"103","line":5,"column":8,"nodeType":"91","messageId":"92","endLine":5,"endColumn":20},{"ruleId":"93","severity":1,"message":"104","line":75,"column":6,"nodeType":"95","endLine":75,"endColumn":14,"suggestions":"105"},{"ruleId":"93","severity":1,"message":"106","line":88,"column":6,"nodeType":"95","endLine":88,"endColumn":30,"suggestions":"107"},"@typescript-eslint/no-unused-vars","'useSound' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onKeyDown'. Either include it or remove the dependency array.","ArrayExpression",["108"],"React Hook useEffect has missing dependencies: 'openOnMobile' and 'playSwitchPageSound'. Either include them or remove the dependency array.",["109"],"'SolidityLogo' is defined but never used.","React Hook useEffect has a missing dependency: 'onEnd'. Either include it or remove the dependency array. If 'onEnd' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["110"],"'HivenAppIcon' is defined but never used.","'GigglAppIcon' is defined but never used.","React Hook useEffect has missing dependencies: 'send' and 'setDoing'. Either include them or remove the dependency array.",["111"],"React Hook useEffect has a missing dependency: 'setActive'. Either include it or remove the dependency array. If 'setActive' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["112"],{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},"Update the dependencies array to be: [onKeyDown]",{"range":"123","text":"124"},"Update the dependencies array to be: [openOnMobile, pathname, playSwitchPageSound]",{"range":"125","text":"126"},"Update the dependencies array to be: [index, onEnd, splitWords]",{"range":"127","text":"128"},"Update the dependencies array to be: [send, setDoing, socket]",{"range":"129","text":"130"},"Update the dependencies array to be: [doing, currentActivity, setActive]",{"range":"131","text":"132"},[1262,1264],"[onKeyDown]",[1186,1196],"[openOnMobile, pathname, playSwitchPageSound]",[1214,1233],"[index, onEnd, splitWords]",[2116,2124],"[send, setDoing, socket]",[2456,2480],"[doing, currentActivity, setActive]"]